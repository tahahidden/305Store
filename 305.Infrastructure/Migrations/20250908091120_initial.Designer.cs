// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using _305.Infrastructure.Persistence;

#nullable disable

namespace _305.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250908091120_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("_305.Domain.Entity.BlacklistedToken", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<DateTime>("black_listed_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("expiry_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("slug")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.HasIndex("slug")
                        .IsUnique();

                    b.ToTable("BlacklistedToken");
                });

            modelBuilder.Entity("_305.Domain.Entity.Blog", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<long>("blog_category_id")
                        .HasColumnType("bigint");

                    b.Property<string>("blog_text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("estimated_read_time")
                        .HasColumnType("integer");

                    b.Property<string>("image")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("image_alt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("keywords")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("meta_description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("show_blog")
                        .HasColumnType("boolean");

                    b.Property<string>("slug")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.HasIndex("blog_category_id");

                    b.HasIndex("slug")
                        .IsUnique();

                    b.ToTable("Blog");
                });

            modelBuilder.Entity("_305.Domain.Entity.BlogCategory", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<DateTime>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("slug")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.HasIndex("slug")
                        .IsUnique();

                    b.ToTable("BlogCategory");
                });

            modelBuilder.Entity("_305.Domain.Entity.Permission", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<DateTime>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("slug")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.HasIndex("slug")
                        .IsUnique();

                    b.ToTable("Permission");
                });

            modelBuilder.Entity("_305.Domain.Entity.Role", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<DateTime>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("slug")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.HasIndex("slug")
                        .IsUnique();

                    b.ToTable("Role");
                });

            modelBuilder.Entity("_305.Domain.Entity.RolePermission", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<DateTime>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("permission_id")
                        .HasColumnType("bigint");

                    b.Property<long>("role_id")
                        .HasColumnType("bigint");

                    b.Property<string>("slug")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.HasIndex("permission_id");

                    b.HasIndex("role_id");

                    b.HasIndex("slug")
                        .IsUnique();

                    b.ToTable("RolePermission");
                });

            modelBuilder.Entity("_305.Domain.Entity.User", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<string>("concurrency_stamp")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("failed_login_count")
                        .HasColumnType("integer");

                    b.Property<bool>("is_active")
                        .HasColumnType("boolean");

                    b.Property<bool>("is_delete_able")
                        .HasColumnType("boolean");

                    b.Property<bool>("is_locked_out")
                        .HasColumnType("boolean");

                    b.Property<bool>("is_mobile_confirmed")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("last_login_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("lock_out_end_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("mobile")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("password_hash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("refresh_token")
                        .HasColumnType("text");

                    b.Property<DateTime>("refresh_token_expiry_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("security_stamp")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("slug")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.HasIndex("name")
                        .IsUnique();

                    b.HasIndex("slug")
                        .IsUnique();

                    b.ToTable("User");
                });

            modelBuilder.Entity("_305.Domain.Entity.UserRole", b =>
                {
                    b.Property<long>("userid")
                        .HasColumnType("bigint");

                    b.Property<long>("roleid")
                        .HasColumnType("bigint");

                    b.Property<long>("id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("slug")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("userid", "roleid", "id");

                    b.HasIndex("roleid");

                    b.HasIndex("slug")
                        .IsUnique();

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("_305.Domain.Entity.Blog", b =>
                {
                    b.HasOne("_305.Domain.Entity.BlogCategory", "blog_category")
                        .WithMany("blogs")
                        .HasForeignKey("blog_category_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("blog_category");
                });

            modelBuilder.Entity("_305.Domain.Entity.RolePermission", b =>
                {
                    b.HasOne("_305.Domain.Entity.Permission", "permission")
                        .WithMany("role_permissions")
                        .HasForeignKey("permission_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("_305.Domain.Entity.Role", "role")
                        .WithMany("role_permissions")
                        .HasForeignKey("role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("permission");

                    b.Navigation("role");
                });

            modelBuilder.Entity("_305.Domain.Entity.UserRole", b =>
                {
                    b.HasOne("_305.Domain.Entity.Role", "role")
                        .WithMany("user_roles")
                        .HasForeignKey("roleid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("_305.Domain.Entity.User", "user")
                        .WithMany("user_roles")
                        .HasForeignKey("userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("role");

                    b.Navigation("user");
                });

            modelBuilder.Entity("_305.Domain.Entity.BlogCategory", b =>
                {
                    b.Navigation("blogs");
                });

            modelBuilder.Entity("_305.Domain.Entity.Permission", b =>
                {
                    b.Navigation("role_permissions");
                });

            modelBuilder.Entity("_305.Domain.Entity.Role", b =>
                {
                    b.Navigation("role_permissions");

                    b.Navigation("user_roles");
                });

            modelBuilder.Entity("_305.Domain.Entity.User", b =>
                {
                    b.Navigation("user_roles");
                });
#pragma warning restore 612, 618
        }
    }
}
